{"version":3,"sources":["../src/index.js"],"names":["app","server","createServer","use","exposedHeaders","corsHeaders","json","limit","bodyLimit","config","db","console","log","listen","process","env","PORT","port","address","socketServer","require","Server","io","on","socket","setTimeout","emit","id","data"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAKA,IAAIA,MAAM,wBAAV;AACAA,IAAIC,MAAJ,GAAa,eAAKC,YAAL,CAAkBF,GAAlB,CAAb;;AAEA;AACAA,IAAIG,GAAJ,CAAQ,oBAAK;AACZC,kBAAgB,iBAAOC;AADX,CAAL,CAAR;;AAIAL,IAAIG,GAAJ,CAAQ,qBAAWG,IAAX,CAAgB;AACvBC,SAAQ,iBAAOC;AADQ,CAAhB,CAAR;;AAIA;AACA,kBAAc,cAAM;;AAEnB;AACAR,MAAIG,GAAJ,CAAQ,0BAAW,EAAEM,wBAAF,EAAUC,MAAV,EAAX,CAAR;;AAEA;;AAEAC,UAAQC,GAAR,CAAY,yBAAZ;AACAZ,MAAIG,GAAJ,CAAQ,GAAR,EAAa,mBAAI,EAAEM,wBAAF,EAAUC,MAAV,EAAJ,CAAb;;AAEAV,MAAIC,MAAJ,CAAWY,MAAX,CAAkBC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,iBAAOC,IAA7C;;AAEAN,UAAQC,GAAR,sBAA+BZ,IAAIC,MAAJ,CAAWiB,OAAX,GAAqBD,IAApD;AACA,CAbD;;AAgBA,IAAIE,eAAeC,QAAQ,MAAR,EAAgBC,MAAhB,CAAuBrB,GAAvB,CAAnB;AACA,IAAIsB,KAAKF,QAAQ,WAAR,EAAqBD,YAArB,CAAT;;AAEAA,aAAaN,MAAb,CAAoB,IAApB;AACAF,QAAQC,GAAR,CAAY,8BAAZ;AACAU,GAAGC,EAAH,CAAM,YAAN,EAAoB,UAAUC,MAAV,EAAkB;AACpCC,aAAW,YAAW;AACpBd,YAAQC,GAAR,CAAY,6BAAZ;AACAY,WAAOE,IAAP,CAAY,OAAZ,EAAqB,EAAEC,IAAI,UAAN,EAArB;AACAH,WAAOD,EAAP,CAAU,SAAV,EAAqB,UAAUK,IAAV,EAAgB;AACnCjB,cAAQC,GAAR,CAAYgB,IAAZ;AACAH,iBAAW,YAAW;AACpBD,eAAOE,IAAP,CAAY,OAAZ,EAAqB,EAAEC,IAAI,UAAN,EAArB;AACD,OAFD,EAEG,KAFH;AAGD,KALD;AAMD,GATD,EASG,GATH;AAUD,CAXD;;kBAgBe3B,G","file":"index.js","sourcesContent":["import http from 'http';\nimport express from 'express';\nimport cors from 'cors';\nimport bodyParser from 'body-parser';\nimport initializeDb from './db';\nimport middleware from './middleware';\nimport api from './api';\nimport config from './config.json';\n\nimport { Router } from 'express';\n\n\nlet app = express();\napp.server = http.createServer(app);\n\n// 3rd party middleware\napp.use(cors({\n\texposedHeaders: config.corsHeaders\n}));\n\napp.use(bodyParser.json({\n\tlimit : config.bodyLimit\n}));\n\n// connect to db\ninitializeDb( db => {\n\n\t// internal middleware\n\tapp.use(middleware({ config, db }));\n\n\t// api router\n\n\tconsole.log('++++ app about to use /');\n\tapp.use('/', api({ config, db }));\n\n\tapp.server.listen(process.env.PORT || config.port);\n\n\tconsole.log(`Started on port ${app.server.address().port}`);\n});\n\n\nvar socketServer = require('http').Server(app);\nvar io = require('socket.io')(socketServer);\n\nsocketServer.listen(3333);\nconsole.log('++++ connecting to socket...');\nio.on('connection', function (socket) {\n  setTimeout(function() {\n    console.log('++++ connected.  sending...')\n    socket.emit('check', { id: 'greeting' });\n    socket.on('results', function (data) {\n      console.log(data);\n      setTimeout(function() { \n        socket.emit('check', { id: 'greeting'});\n      }, 10000);\n    });\n  }, 250);  \n});\n\n\n\n\nexport default app;\n"]}